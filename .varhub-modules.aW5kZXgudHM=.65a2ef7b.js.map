{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,E,E,O,C,gB,I,G,E,E,O,C,a,I,GCAO,IAAM,EAAc,mEAAgF,EAAW,CAAC,KAAK,WAAW,OAAO,CAAE,WAAY,GAAI,WAAY,uiDAA4jD,WAAY,owOAAu0O,eAAgB,ilDAAwlD,WAAY,cAAc,CAAC,C","sources":["<anon>","src/controllers/.varhub-modules.aW5kZXgudHM=.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire7856\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"jAkKS\", function(module, exports) {\n\n$parcel$export(module.exports, \"roomIntegrity\", () => $e4217aa4843e7bc8$export$d0170732d96bb67f);\n$parcel$export(module.exports, \"roomModule\", () => $e4217aa4843e7bc8$export$9010eb7ccbf897ba);\nconst $e4217aa4843e7bc8$export$d0170732d96bb67f = \"e62687c6285398963090e11f58483b209de9a40c1464f8805fd22c54a5259a78\";\nconst $e4217aa4843e7bc8$export$9010eb7ccbf897ba = {\n    main: \"index.js\",\n    source: {\n        [\"lobby.js\"]: \"\",\n        [\"index.js\"]: 'import room from \"varhub:room\";\\nimport { $gameState, $teams, selectTeamHandler, moveHandler, setFieldSizeHandler, $field, $height, $turnTeam } from \"./logic.js\";\\nimport { sample } from \"effector\";\\nroom.on(\"offline\", room.kick);\\nroom.on(\"leave\", function (player) { });\\nroom.message = \"tic-tac-toe-gravity-effector\";\\nexport function getGameState() {\\n    return $gameState.getState();\\n}\\nsample({\\n    source: $gameState,\\n    filter: Boolean,\\n    fn: function (gameState) { return room.broadcast(\"state\", gameState); }\\n});\\nexport function getTeams() {\\n    return $teams.getState();\\n}\\nsample({\\n    source: $teams,\\n    filter: Boolean,\\n    fn: function (teams) { return room.broadcast(\"teams\", teams); }\\n});\\nexport function getField() {\\n    return {\\n        field: $field.getState(),\\n        height: $height.getState()\\n    };\\n}\\nsample({\\n    clock: [$field, $height],\\n    source: { field: $field, height: $height },\\n    fn: function (_a) {\\n        var field = _a.field, height = _a.height;\\n        return room.broadcast(\"field\", { field: field, height: height });\\n    }\\n});\\nsample({\\n    source: $turnTeam,\\n    filter: Boolean,\\n    fn: function (turnTeam) { return room.broadcast(\"turn\", turnTeam); }\\n});\\nexport function gameJoinTeam(team) {\\n    selectTeamHandler({ player: this.player, team: team });\\n}\\nexport function gameStart(rows, columns) {\\n    setFieldSizeHandler({ player: this.player, width: columns, height: rows });\\n}\\nexport function gameTurn(colNumber) {\\n    moveHandler({ player: this.player, column: colNumber });\\n}\\n',\n        [\"logic.js\"]: 'var __assign = (this && this.__assign) || function () {\\n    __assign = Object.assign || function(t) {\\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\\n            s = arguments[i];\\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\\n                t[p] = s[p];\\n        }\\n        return t;\\n    };\\n    return __assign.apply(this, arguments);\\n};\\nimport { createStore, createEvent, sample } from \"effector\";\\nimport { getPlayerTeam, isPlayer, checkWinPoints, getOppositeTeam } from \"./selectors.js\";\\nimport room from \"varhub:room\";\\nexport var $gameState = createStore(\"lobby\", { name: \"gameState\" });\\nexport var $teams = createStore({ x: \"\", o: \"\" }, { name: \"gameTeams\" });\\nexport var selectTeamHandler = createEvent();\\nvar joinTeam = createEvent(\"joinTeam\");\\nvar leaveTeam = createEvent(\"leaveTeam\");\\nsample({\\n    clock: selectTeamHandler,\\n    source: $gameState,\\n    filter: function (state, _a) {\\n        var team = _a.team;\\n        return state === \"lobby\" && team !== null;\\n    },\\n    fn: function (_, data) { return data; },\\n    target: joinTeam\\n});\\nsample({\\n    clock: selectTeamHandler,\\n    source: $gameState,\\n    filter: function (state, _a) {\\n        var team = _a.team;\\n        return state === \"lobby\" && team === null;\\n    },\\n    fn: function (_, data) { return data; },\\n    target: leaveTeam\\n});\\nsample({\\n    clock: joinTeam,\\n    source: $teams,\\n    filter: function (teams, _a) {\\n        var team = _a.team;\\n        return !teams[team];\\n    },\\n    fn: function (teams, _a) {\\n        var _b, _c;\\n        var player = _a.player, team = _a.team;\\n        var oppositeTeam = getOppositeTeam(team);\\n        return teams[oppositeTeam] === player\\n            ? __assign(__assign({}, teams), (_b = {}, _b[team] = player, _b[oppositeTeam] = \"\", _b)) : __assign(__assign({}, teams), (_c = {}, _c[team] = player, _c[oppositeTeam] = teams[oppositeTeam], _c));\\n    },\\n    target: $teams\\n});\\nsample({\\n    clock: leaveTeam,\\n    source: $teams,\\n    filter: function (teams, _a) {\\n        var player = _a.player;\\n        return teams.x === player || teams.o === player;\\n    },\\n    fn: function (teams, _a) {\\n        var player = _a.player;\\n        return teams.o === player ? { x: teams.x, o: \"\" } : { o: teams.o, x: \"\" };\\n    },\\n    target: $teams\\n});\\nexport var $field = createStore([], { name: \"field\" });\\nexport var $height = createStore(0, { name: \"height\" });\\nexport var setFieldSizeHandler = createEvent(\"setFieldSizeHandler\");\\nexport var setFieldSize = createEvent();\\nsample({\\n    clock: setFieldSizeHandler,\\n    source: { state: $gameState, teams: $teams },\\n    filter: function (_a, _b) {\\n        var state = _a.state, teams = _a.teams;\\n        var player = _b.player, width = _b.width, height = _b.height;\\n        return [\\n            state === \"lobby\",\\n            isPlayer(teams, player),\\n            Number.isInteger(width),\\n            Number.isInteger(height),\\n            width > 4,\\n            height > 4,\\n            width < 20,\\n            height < 20\\n        ].every(function (e) { return e; });\\n    },\\n    fn: function (_, data) { return data; },\\n    target: setFieldSize\\n});\\nsample({\\n    clock: setFieldSize,\\n    fn: function (_a) {\\n        var width = _a.width;\\n        return Array.from({ length: width }).map(function () { return []; });\\n    },\\n    target: $field\\n});\\nsample({\\n    clock: setFieldSize,\\n    fn: function (_a) {\\n        var height = _a.height;\\n        return height;\\n    },\\n    target: $height\\n});\\nsample({\\n    clock: setFieldSize,\\n    source: $teams,\\n    filter: function (teams) { return Boolean(teams.x) && Boolean(teams.o); },\\n    fn: function () { return \"game\"; },\\n    target: $gameState\\n});\\nexport var moveHandler = createEvent(\"moveHandler\");\\nexport var move = createEvent(\"move\");\\nexport var $turnTeam = createStore(\"\", { name: \"turnTeam\" });\\nsample({\\n    clock: $gameState,\\n    filter: function (state) { return state === \"game\"; },\\n    fn: function () { return \"x\"; },\\n    target: $turnTeam\\n});\\nsample({\\n    clock: moveHandler,\\n    source: { state: $gameState, teams: $teams, fields: $field, height: $height, turnTeam: $turnTeam },\\n    filter: function (_a, _b) {\\n        var state = _a.state, teams = _a.teams, fields = _a.fields, height = _a.height, turnTeam = _a.turnTeam;\\n        var player = _b.player, column = _b.column;\\n        return [\\n            state === \"game\",\\n            isPlayer(teams, player),\\n            getPlayerTeam(teams, player) === turnTeam,\\n            Number.isInteger(column),\\n            column < fields.length,\\n            fields[column].length < height\\n        ].every(function (e) { return e; });\\n    },\\n    fn: function (_, data) { return data; },\\n    target: move\\n});\\nvar checkWinAfterTurn = createEvent();\\nsample({\\n    clock: move,\\n    source: { fields: $field, turnTeam: $turnTeam },\\n    fn: function (_a, _b) {\\n        var fields = _a.fields, turnTeam = _a.turnTeam;\\n        var column = _b.column;\\n        var map = fields.slice();\\n        var row = map[column].push(turnTeam);\\n        return { map: map, row: row, column: column, turnTeam: turnTeam };\\n    },\\n    target: checkWinAfterTurn\\n});\\nvar updateField = createEvent();\\nsample({\\n    clock: checkWinAfterTurn,\\n    source: { state: $gameState, fields: $field, turnTeam: $turnTeam },\\n    filter: function (_a, patch) {\\n        var state = _a.state;\\n        return state === \"game\";\\n    },\\n    fn: function (_a, _b) {\\n        var turnTeam = _a.turnTeam;\\n        var map = _b.map, column = _b.column, row = _b.row;\\n        var sequence = checkWinPoints(map, column, row, turnTeam, 4);\\n        if (sequence.length === 0)\\n            return { map: map };\\n        var team = turnTeam.toUpperCase();\\n        sequence.forEach(function (_a) {\\n            var row = _a[0], col = _a[1];\\n            map[row][col] = team;\\n        });\\n        return { map: map, sequence: sequence };\\n    },\\n    target: updateField\\n});\\nsample({\\n    clock: updateField,\\n    fn: function (_a) {\\n        var map = _a.map;\\n        return map;\\n    },\\n    target: $field\\n});\\nsample({\\n    clock: updateField,\\n    filter: function (_a) {\\n        var sequence = _a.sequence;\\n        return Boolean(sequence);\\n    },\\n    fn: function () { return \"finish\"; },\\n    target: $gameState\\n});\\nsample({\\n    clock: updateField,\\n    source: $turnTeam,\\n    filter: function (_, _a) {\\n        var sequence = _a.sequence;\\n        return !Boolean(sequence);\\n    },\\n    fn: function (turnTeam) { return getOppositeTeam(turnTeam); },\\n    target: $turnTeam\\n});\\nsample({\\n    clock: $gameState,\\n    source: { turnTeam: $turnTeam, teams: $teams },\\n    filter: function (_a, state) {\\n        var turnTeam = _a.turnTeam, teams = _a.teams;\\n        return Boolean(teams.x) && Boolean(teams.o) && Boolean(turnTeam) && state === \"finish\";\\n    },\\n    fn: function (_a) {\\n        var _b;\\n        var turnTeam = _a.turnTeam, teams = _a.teams;\\n        var opposite = getOppositeTeam(turnTeam);\\n        var winner = teams[turnTeam];\\n        var looser = teams[opposite];\\n        var data = (_b = {},\\n            _b[turnTeam] = { status: \"win\", player: winner },\\n            _b[opposite] = { status: \"loose\", player: looser },\\n            _b);\\n        room.broadcast(\"finish\", data);\\n    }\\n});\\n',\n        [\"selectors.js\"]: 'export var getPlayerTeam = function (teams, player) { return Object\\n    .entries(teams)\\n    .filter(function (_a) {\\n    var team = _a[0], temp = _a[1];\\n    return player === temp;\\n})\\n    .at(0)\\n    .at(0); };\\nexport var getOppositeTeam = function (team) { return team === \"x\" ? \"o\" : \"x\"; };\\nexport var isPlayer = function (teams, player) { return Object.values(teams).includes(player); };\\nexport function checkWinPoints(map, colNumber, rowNumber, team, winLength) {\\n    var _a, _b;\\n    var totalWinPoints = [];\\n    var directions = [[0, 1], [1, 1], [1, 0], [1, -1]];\\n    for (var _i = 0, directions_1 = directions; _i < directions_1.length; _i++) {\\n        var dir = directions_1[_i];\\n        var winPoints = [];\\n        var point = [colNumber, rowNumber];\\n        while (true) {\\n            var value = (_a = map[point[0]]) === null || _a === void 0 ? void 0 : _a[point[1]];\\n            if (value !== team)\\n                break;\\n            winPoints.push(point);\\n            point = [point[0] + dir[0], point[1] + dir[1]];\\n        }\\n        point = [colNumber - dir[0], rowNumber - dir[1]];\\n        while (true) {\\n            var value = (_b = map[point[0]]) === null || _b === void 0 ? void 0 : _b[point[1]];\\n            if (value !== team)\\n                break;\\n            winPoints.push(point);\\n            point = [point[0] - dir[0], point[1] - dir[1]];\\n        }\\n        if (winPoints.length >= winLength)\\n            totalWinPoints.push.apply(totalWinPoints, winPoints);\\n    }\\n    if (totalWinPoints.length === 0)\\n        return [];\\n    return totalWinPoints;\\n}\\n',\n        [\"types.js\"]: \"export {};\\n\"\n    }\n};\n\n});\n\n\n//# sourceMappingURL=.varhub-modules.aW5kZXgudHM=.65a2ef7b.js.map\n","export const roomIntegrity=\"e62687c6285398963090e11f58483b209de9a40c1464f8805fd22c54a5259a78\";export const roomModule={main:\"index.js\",source:{[\"lobby.js\"]:\"\",[\"index.js\"]:\"import room from \\\"varhub:room\\\";\\nimport { $gameState, $teams, selectTeamHandler, moveHandler, setFieldSizeHandler, $field, $height, $turnTeam } from \\\"./logic.js\\\";\\nimport { sample } from \\\"effector\\\";\\nroom.on(\\\"offline\\\", room.kick);\\nroom.on(\\\"leave\\\", function (player) { });\\nroom.message = \\\"tic-tac-toe-gravity-effector\\\";\\nexport function getGameState() {\\n    return $gameState.getState();\\n}\\nsample({\\n    source: $gameState,\\n    filter: Boolean,\\n    fn: function (gameState) { return room.broadcast(\\\"state\\\", gameState); }\\n});\\nexport function getTeams() {\\n    return $teams.getState();\\n}\\nsample({\\n    source: $teams,\\n    filter: Boolean,\\n    fn: function (teams) { return room.broadcast(\\\"teams\\\", teams); }\\n});\\nexport function getField() {\\n    return {\\n        field: $field.getState(),\\n        height: $height.getState()\\n    };\\n}\\nsample({\\n    clock: [$field, $height],\\n    source: { field: $field, height: $height },\\n    fn: function (_a) {\\n        var field = _a.field, height = _a.height;\\n        return room.broadcast(\\\"field\\\", { field: field, height: height });\\n    }\\n});\\nsample({\\n    source: $turnTeam,\\n    filter: Boolean,\\n    fn: function (turnTeam) { return room.broadcast(\\\"turn\\\", turnTeam); }\\n});\\nexport function gameJoinTeam(team) {\\n    selectTeamHandler({ player: this.player, team: team });\\n}\\nexport function gameStart(rows, columns) {\\n    setFieldSizeHandler({ player: this.player, width: columns, height: rows });\\n}\\nexport function gameTurn(colNumber) {\\n    moveHandler({ player: this.player, column: colNumber });\\n}\\n\",[\"logic.js\"]:\"var __assign = (this && this.__assign) || function () {\\n    __assign = Object.assign || function(t) {\\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\\n            s = arguments[i];\\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\\n                t[p] = s[p];\\n        }\\n        return t;\\n    };\\n    return __assign.apply(this, arguments);\\n};\\nimport { createStore, createEvent, sample } from \\\"effector\\\";\\nimport { getPlayerTeam, isPlayer, checkWinPoints, getOppositeTeam } from \\\"./selectors.js\\\";\\nimport room from \\\"varhub:room\\\";\\nexport var $gameState = createStore(\\\"lobby\\\", { name: \\\"gameState\\\" });\\nexport var $teams = createStore({ x: \\\"\\\", o: \\\"\\\" }, { name: \\\"gameTeams\\\" });\\nexport var selectTeamHandler = createEvent();\\nvar joinTeam = createEvent(\\\"joinTeam\\\");\\nvar leaveTeam = createEvent(\\\"leaveTeam\\\");\\nsample({\\n    clock: selectTeamHandler,\\n    source: $gameState,\\n    filter: function (state, _a) {\\n        var team = _a.team;\\n        return state === \\\"lobby\\\" && team !== null;\\n    },\\n    fn: function (_, data) { return data; },\\n    target: joinTeam\\n});\\nsample({\\n    clock: selectTeamHandler,\\n    source: $gameState,\\n    filter: function (state, _a) {\\n        var team = _a.team;\\n        return state === \\\"lobby\\\" && team === null;\\n    },\\n    fn: function (_, data) { return data; },\\n    target: leaveTeam\\n});\\nsample({\\n    clock: joinTeam,\\n    source: $teams,\\n    filter: function (teams, _a) {\\n        var team = _a.team;\\n        return !teams[team];\\n    },\\n    fn: function (teams, _a) {\\n        var _b, _c;\\n        var player = _a.player, team = _a.team;\\n        var oppositeTeam = getOppositeTeam(team);\\n        return teams[oppositeTeam] === player\\n            ? __assign(__assign({}, teams), (_b = {}, _b[team] = player, _b[oppositeTeam] = \\\"\\\", _b)) : __assign(__assign({}, teams), (_c = {}, _c[team] = player, _c[oppositeTeam] = teams[oppositeTeam], _c));\\n    },\\n    target: $teams\\n});\\nsample({\\n    clock: leaveTeam,\\n    source: $teams,\\n    filter: function (teams, _a) {\\n        var player = _a.player;\\n        return teams.x === player || teams.o === player;\\n    },\\n    fn: function (teams, _a) {\\n        var player = _a.player;\\n        return teams.o === player ? { x: teams.x, o: \\\"\\\" } : { o: teams.o, x: \\\"\\\" };\\n    },\\n    target: $teams\\n});\\nexport var $field = createStore([], { name: \\\"field\\\" });\\nexport var $height = createStore(0, { name: \\\"height\\\" });\\nexport var setFieldSizeHandler = createEvent(\\\"setFieldSizeHandler\\\");\\nexport var setFieldSize = createEvent();\\nsample({\\n    clock: setFieldSizeHandler,\\n    source: { state: $gameState, teams: $teams },\\n    filter: function (_a, _b) {\\n        var state = _a.state, teams = _a.teams;\\n        var player = _b.player, width = _b.width, height = _b.height;\\n        return [\\n            state === \\\"lobby\\\",\\n            isPlayer(teams, player),\\n            Number.isInteger(width),\\n            Number.isInteger(height),\\n            width > 4,\\n            height > 4,\\n            width < 20,\\n            height < 20\\n        ].every(function (e) { return e; });\\n    },\\n    fn: function (_, data) { return data; },\\n    target: setFieldSize\\n});\\nsample({\\n    clock: setFieldSize,\\n    fn: function (_a) {\\n        var width = _a.width;\\n        return Array.from({ length: width }).map(function () { return []; });\\n    },\\n    target: $field\\n});\\nsample({\\n    clock: setFieldSize,\\n    fn: function (_a) {\\n        var height = _a.height;\\n        return height;\\n    },\\n    target: $height\\n});\\nsample({\\n    clock: setFieldSize,\\n    source: $teams,\\n    filter: function (teams) { return Boolean(teams.x) && Boolean(teams.o); },\\n    fn: function () { return \\\"game\\\"; },\\n    target: $gameState\\n});\\nexport var moveHandler = createEvent(\\\"moveHandler\\\");\\nexport var move = createEvent(\\\"move\\\");\\nexport var $turnTeam = createStore(\\\"\\\", { name: \\\"turnTeam\\\" });\\nsample({\\n    clock: $gameState,\\n    filter: function (state) { return state === \\\"game\\\"; },\\n    fn: function () { return \\\"x\\\"; },\\n    target: $turnTeam\\n});\\nsample({\\n    clock: moveHandler,\\n    source: { state: $gameState, teams: $teams, fields: $field, height: $height, turnTeam: $turnTeam },\\n    filter: function (_a, _b) {\\n        var state = _a.state, teams = _a.teams, fields = _a.fields, height = _a.height, turnTeam = _a.turnTeam;\\n        var player = _b.player, column = _b.column;\\n        return [\\n            state === \\\"game\\\",\\n            isPlayer(teams, player),\\n            getPlayerTeam(teams, player) === turnTeam,\\n            Number.isInteger(column),\\n            column < fields.length,\\n            fields[column].length < height\\n        ].every(function (e) { return e; });\\n    },\\n    fn: function (_, data) { return data; },\\n    target: move\\n});\\nvar checkWinAfterTurn = createEvent();\\nsample({\\n    clock: move,\\n    source: { fields: $field, turnTeam: $turnTeam },\\n    fn: function (_a, _b) {\\n        var fields = _a.fields, turnTeam = _a.turnTeam;\\n        var column = _b.column;\\n        var map = fields.slice();\\n        var row = map[column].push(turnTeam);\\n        return { map: map, row: row, column: column, turnTeam: turnTeam };\\n    },\\n    target: checkWinAfterTurn\\n});\\nvar updateField = createEvent();\\nsample({\\n    clock: checkWinAfterTurn,\\n    source: { state: $gameState, fields: $field, turnTeam: $turnTeam },\\n    filter: function (_a, patch) {\\n        var state = _a.state;\\n        return state === \\\"game\\\";\\n    },\\n    fn: function (_a, _b) {\\n        var turnTeam = _a.turnTeam;\\n        var map = _b.map, column = _b.column, row = _b.row;\\n        var sequence = checkWinPoints(map, column, row, turnTeam, 4);\\n        if (sequence.length === 0)\\n            return { map: map };\\n        var team = turnTeam.toUpperCase();\\n        sequence.forEach(function (_a) {\\n            var row = _a[0], col = _a[1];\\n            map[row][col] = team;\\n        });\\n        return { map: map, sequence: sequence };\\n    },\\n    target: updateField\\n});\\nsample({\\n    clock: updateField,\\n    fn: function (_a) {\\n        var map = _a.map;\\n        return map;\\n    },\\n    target: $field\\n});\\nsample({\\n    clock: updateField,\\n    filter: function (_a) {\\n        var sequence = _a.sequence;\\n        return Boolean(sequence);\\n    },\\n    fn: function () { return \\\"finish\\\"; },\\n    target: $gameState\\n});\\nsample({\\n    clock: updateField,\\n    source: $turnTeam,\\n    filter: function (_, _a) {\\n        var sequence = _a.sequence;\\n        return !Boolean(sequence);\\n    },\\n    fn: function (turnTeam) { return getOppositeTeam(turnTeam); },\\n    target: $turnTeam\\n});\\nsample({\\n    clock: $gameState,\\n    source: { turnTeam: $turnTeam, teams: $teams },\\n    filter: function (_a, state) {\\n        var turnTeam = _a.turnTeam, teams = _a.teams;\\n        return Boolean(teams.x) && Boolean(teams.o) && Boolean(turnTeam) && state === \\\"finish\\\";\\n    },\\n    fn: function (_a) {\\n        var _b;\\n        var turnTeam = _a.turnTeam, teams = _a.teams;\\n        var opposite = getOppositeTeam(turnTeam);\\n        var winner = teams[turnTeam];\\n        var looser = teams[opposite];\\n        var data = (_b = {},\\n            _b[turnTeam] = { status: \\\"win\\\", player: winner },\\n            _b[opposite] = { status: \\\"loose\\\", player: looser },\\n            _b);\\n        room.broadcast(\\\"finish\\\", data);\\n    }\\n});\\n\",[\"selectors.js\"]:\"export var getPlayerTeam = function (teams, player) { return Object\\n    .entries(teams)\\n    .filter(function (_a) {\\n    var team = _a[0], temp = _a[1];\\n    return player === temp;\\n})\\n    .at(0)\\n    .at(0); };\\nexport var getOppositeTeam = function (team) { return team === \\\"x\\\" ? \\\"o\\\" : \\\"x\\\"; };\\nexport var isPlayer = function (teams, player) { return Object.values(teams).includes(player); };\\nexport function checkWinPoints(map, colNumber, rowNumber, team, winLength) {\\n    var _a, _b;\\n    var totalWinPoints = [];\\n    var directions = [[0, 1], [1, 1], [1, 0], [1, -1]];\\n    for (var _i = 0, directions_1 = directions; _i < directions_1.length; _i++) {\\n        var dir = directions_1[_i];\\n        var winPoints = [];\\n        var point = [colNumber, rowNumber];\\n        while (true) {\\n            var value = (_a = map[point[0]]) === null || _a === void 0 ? void 0 : _a[point[1]];\\n            if (value !== team)\\n                break;\\n            winPoints.push(point);\\n            point = [point[0] + dir[0], point[1] + dir[1]];\\n        }\\n        point = [colNumber - dir[0], rowNumber - dir[1]];\\n        while (true) {\\n            var value = (_b = map[point[0]]) === null || _b === void 0 ? void 0 : _b[point[1]];\\n            if (value !== team)\\n                break;\\n            winPoints.push(point);\\n            point = [point[0] - dir[0], point[1] - dir[1]];\\n        }\\n        if (winPoints.length >= winLength)\\n            totalWinPoints.push.apply(totalWinPoints, winPoints);\\n    }\\n    if (totalWinPoints.length === 0)\\n        return [];\\n    return totalWinPoints;\\n}\\n\",[\"types.js\"]:\"export {};\\n\"}};"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$e4217aa4843e7bc8$export$d0170732d96bb67f","$e4217aa4843e7bc8$export$9010eb7ccbf897ba","main","source"],"version":3,"file":".varhub-modules.aW5kZXgudHM=.65a2ef7b.js.map"}